"use strict";(self.webpackChunkgh_pages_bundle=self.webpackChunkgh_pages_bundle||[]).push([[3915],{12965:(e,o,t)=>{t(98848)},36887:(e,o,t)=>{var n=t(12618),r=t(25707),a=t(26109),s=t(43494);const i=n.AH`
  :host {
    display: block;
    width: var(--local-width);
    height: var(--local-height);
  }

  :host([data-object-fit='cover']) img {
    object-fit: cover;
    object-position: center center;
  }

  :host([data-object-fit='contain']) img {
    object-fit: contain;
    object-position: center center;
  }

  img {
    display: block;
    width: 100%;
    height: 100%;
    border-radius: inherit;
  }
`;var c=function(e,o,t,n){var r,a=arguments.length,s=a<3?o:null===n?n=Object.getOwnPropertyDescriptor(o,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,o,t,n);else for(var i=e.length-1;i>=0;i--)(r=e[i])&&(s=(a<3?r(s):a>3?r(o,t,s):r(o,t))||s);return a>3&&s&&Object.defineProperty(o,t,s),s};let u=class extends n.WF{constructor(){super(...arguments),this.src="./path/to/image.jpg",this.alt="Image",this.size=void 0,this.objectFit="cover"}render(){return this.objectFit&&(this.dataset.objectFit=this.objectFit),this.style.cssText=`\n      --local-width: ${this.size?`var(--wui-icon-size-${this.size});`:"100%"};\n      --local-height: ${this.size?`var(--wui-icon-size-${this.size});`:"100%"};\n      `,n.qy`<img src=${this.src} alt=${this.alt} @error=${this.handleImageError} />`}handleImageError(){this.dispatchEvent(new CustomEvent("onLoadError",{bubbles:!0,composed:!0}))}};u.styles=[a.W5,a.ck,i],c([(0,r.MZ)()],u.prototype,"src",void 0),c([(0,r.MZ)()],u.prototype,"alt",void 0),c([(0,r.MZ)()],u.prototype,"size",void 0),c([(0,r.MZ)()],u.prototype,"objectFit",void 0),u=c([(0,s.E)("wui-image")],u)},51636:(e,o,t)=>{t(2132)},72510:(e,o,t)=>{var n=t(12618),r=t(25707),a=(t(36887),t(18409),t(26109)),s=t(43494);t(12851);const i=n.AH`
  :host {
    display: block;
  }

  :host > button {
    gap: var(--wui-spacing-xxs);
    padding: var(--wui-spacing-xs);
    padding-right: var(--wui-spacing-1xs);
    height: 40px;
    border-radius: var(--wui-border-radius-l);
    background: var(--wui-color-gray-glass-002);
    border-width: 0px;
    box-shadow: inset 0 0 0 1px var(--wui-color-gray-glass-002);
  }

  :host > button wui-image {
    width: 24px;
    height: 24px;
    border-radius: var(--wui-border-radius-s);
    box-shadow: inset 0 0 0 1px var(--wui-color-gray-glass-010);
  }
`;var c=function(e,o,t,n){var r,a=arguments.length,s=a<3?o:null===n?n=Object.getOwnPropertyDescriptor(o,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,o,t,n);else for(var i=e.length-1;i>=0;i--)(r=e[i])&&(s=(a<3?r(s):a>3?r(o,t,s):r(o,t))||s);return a>3&&s&&Object.defineProperty(o,t,s),s};let u=class extends n.WF{constructor(){super(...arguments),this.text=""}render(){return n.qy`
      <button>
        ${this.tokenTemplate()}
        <wui-text variant="paragraph-600" color="fg-100">${this.text}</wui-text>
      </button>
    `}tokenTemplate(){return this.imageSrc?n.qy`<wui-image src=${this.imageSrc}></wui-image>`:n.qy`
      <wui-icon-box
        size="sm"
        iconColor="fg-200"
        backgroundColor="fg-300"
        icon="networkPlaceholder"
      ></wui-icon-box>
    `}};u.styles=[a.W5,a.fD,i],c([(0,r.MZ)()],u.prototype,"imageSrc",void 0),c([(0,r.MZ)()],u.prototype,"text",void 0),u=c([(0,s.E)("wui-token-button")],u)},80171:(e,o,t)=>{t.d(o,{GN:()=>N});var n=t(29073),r=t(4707),a=t(23768),s=t(24376),i=t(10152),c=t(48075),u=t(74496),d=t(62944),T=t(26742),l=t(80036);const k={getGasPriceInEther:(e,o)=>Number(o*e)/1e18,getGasPriceInUSD(e,o,t){const n=k.getGasPriceInEther(o,t);return a.S.bigNumber(e).times(n).toNumber()},getPriceImpact({sourceTokenAmount:e,sourceTokenPriceInUSD:o,toTokenPriceInUSD:t,toTokenAmount:n}){const r=a.S.bigNumber(e).times(o),s=a.S.bigNumber(n).times(t);return r.minus(s).div(r).times(100).toNumber()},getMaxSlippage(e,o){const t=a.S.bigNumber(e).div(100);return a.S.multiply(o,t).toNumber()},getProviderFee:(e,o=.0085)=>a.S.bigNumber(e).times(o).toString(),isInsufficientNetworkTokenForGas(e,o){const t=o||"0";return!!a.S.bigNumber(e).eq(0)||a.S.bigNumber(a.S.bigNumber(t)).gt(e)},isInsufficientSourceTokenForSwap(e,o,t){const n=t?.find((e=>e.address===o))?.quantity?.numeric;return a.S.bigNumber(n||"0").lt(e)},getToTokenAmount({sourceToken:e,toToken:o,sourceTokenPrice:t,toTokenPrice:n,sourceTokenAmount:r}){if("0"===r)return"0";if(!e||!o)return"0";const s=e.decimals,i=t,c=o.decimals,u=n;if(u<=0)return"0";const d=a.S.bigNumber(r).times(.0085),T=a.S.bigNumber(r).minus(d).times(a.S.bigNumber(10).pow(s)),l=a.S.bigNumber(i).div(u),k=s-c;return T.times(l).div(a.S.bigNumber(10).pow(k)).div(a.S.bigNumber(10).pow(c)).toFixed(c).toString()}};var g=t(35940),m=t(63450),p=t(71655),w=t(75595),h=t(6056),A=t(79177),S=t(36010),v=t(90184),b=t(78508),P=t(21871);const f=15e4;Error;const y={initializing:!1,initialized:!1,loadingPrices:!1,loadingQuote:!1,loadingApprovalTransaction:!1,loadingBuildTransaction:!1,loadingTransaction:!1,fetchError:!1,approvalTransaction:void 0,swapTransaction:void 0,transactionError:void 0,sourceToken:void 0,sourceTokenAmount:"",sourceTokenPriceInUSD:0,toToken:void 0,toTokenAmount:"",toTokenPriceInUSD:0,networkPrice:"0",networkBalanceInUSD:"0",networkTokenSymbol:"",inputError:void 0,slippage:d.oU.CONVERT_SLIPPAGE_TOLERANCE,tokens:void 0,popularTokens:void 0,suggestedTokens:void 0,foundTokens:void 0,myTokensWithBalance:void 0,tokensPriceMap:{},gasFee:"0",gasPriceInUSD:0,priceImpact:void 0,maxSlippage:void 0,providerFee:void 0},I=(0,n.BX)(y),E={state:I,subscribe:e=>(0,n.B1)(I,(()=>e(I))),subscribeKey:(e,o)=>(0,r.u$)(I,e,o),getParams(){const e=h.W.state.activeCaipAddress,o=h.W.state.activeChain,t=T.w.getPlainAddress(e),n=(0,u.K)(),r=S.a.getConnectorId(o);if(!t)throw new Error("No address found to swap the tokens from.");const i=!I.toToken?.address||!I.toToken?.decimals,c=!I.sourceToken?.address||!I.sourceToken?.decimals||!a.S.bigNumber(I.sourceTokenAmount).gt(0),d=!I.sourceTokenAmount;return{networkAddress:n,fromAddress:t,fromCaipAddress:e,sourceTokenAddress:I.sourceToken?.address,toTokenAddress:I.toToken?.address,toTokenAmount:I.toTokenAmount,toTokenDecimals:I.toToken?.decimals,sourceTokenAmount:I.sourceTokenAmount,sourceTokenDecimals:I.sourceToken?.decimals,invalidToToken:i,invalidSourceToken:c,invalidSourceTokenAmount:d,availableToSwap:e&&!i&&!c&&!d,isAuthConnector:r===s.o.CONNECTOR_ID.AUTH}},setSourceToken(e){if(!e)return I.sourceToken=e,I.sourceTokenAmount="",void(I.sourceTokenPriceInUSD=0);I.sourceToken=e,N.setTokenPrice(e.address,"sourceToken")},setSourceTokenAmount(e){I.sourceTokenAmount=e},setToToken(e){if(!e)return I.toToken=e,I.toTokenAmount="",void(I.toTokenPriceInUSD=0);I.toToken=e,N.setTokenPrice(e.address,"toToken")},setToTokenAmount(e){I.toTokenAmount=e?a.S.formatNumberToLocalString(e,6):""},async setTokenPrice(e,o){let t=I.tokensPriceMap[e]||0;t||(I.loadingPrices=!0,t=await N.getAddressPrice(e)),"sourceToken"===o?I.sourceTokenPriceInUSD=t:"toToken"===o&&(I.toTokenPriceInUSD=t),I.loadingPrices&&(I.loadingPrices=!1),N.getParams().availableToSwap&&N.swapTokens()},switchTokens(){if(I.initializing||!I.initialized)return;const e=I.toToken?{...I.toToken}:void 0,o=I.sourceToken?{...I.sourceToken}:void 0,t=e&&""===I.toTokenAmount?"1":I.toTokenAmount;N.setSourceToken(e),N.setToToken(o),N.setSourceTokenAmount(t),N.setToTokenAmount(""),N.swapTokens()},resetState(){I.myTokensWithBalance=y.myTokensWithBalance,I.tokensPriceMap=y.tokensPriceMap,I.initialized=y.initialized,I.sourceToken=y.sourceToken,I.sourceTokenAmount=y.sourceTokenAmount,I.sourceTokenPriceInUSD=y.sourceTokenPriceInUSD,I.toToken=y.toToken,I.toTokenAmount=y.toTokenAmount,I.toTokenPriceInUSD=y.toTokenPriceInUSD,I.networkPrice=y.networkPrice,I.networkTokenSymbol=y.networkTokenSymbol,I.networkBalanceInUSD=y.networkBalanceInUSD,I.inputError=y.inputError,I.myTokensWithBalance=y.myTokensWithBalance},resetValues(){const{networkAddress:e}=N.getParams(),o=I.tokens?.find((o=>o.address===e));N.setSourceToken(o),N.setToToken(void 0)},getApprovalLoadingState:()=>I.loadingApprovalTransaction,clearError(){I.transactionError=void 0},async initializeState(){if(!I.initializing){if(I.initializing=!0,!I.initialized)try{await N.fetchTokens(),I.initialized=!0}catch(e){I.initialized=!1,P.P.showError("Failed to initialize swap"),b.I.goBack()}I.initializing=!1}},async fetchTokens(){const{networkAddress:e}=N.getParams();await N.getTokenList(),await N.getNetworkTokenPrice(),await N.getMyTokensWithBalance();const o=I.tokens?.find((o=>o.address===e));o&&(I.networkTokenSymbol=o.symbol,N.setSourceToken(o),N.setSourceTokenAmount("1"))},async getTokenList(){const e=await l.s.getTokenList();I.tokens=e,I.popularTokens=e.sort(((e,o)=>e.symbol<o.symbol?-1:e.symbol>o.symbol?1:0)),I.suggestedTokens=e.filter((e=>!!d.oU.SWAP_SUGGESTED_TOKENS.includes(e.symbol)),{})},async getAddressPrice(e){const o=I.tokensPriceMap[e];if(o)return o;const t=await w.T.fetchTokenPrice({addresses:[e]}),n=t?.fungibles||[],r=[...I.tokens||[],...I.myTokensWithBalance||[]],a=r?.find((o=>o.address===e))?.symbol,s=n.find((e=>e.symbol.toLowerCase()===a?.toLowerCase()))?.price||0,i=parseFloat(s.toString());return I.tokensPriceMap[e]=i,i},async getNetworkTokenPrice(){const{networkAddress:e}=N.getParams(),o=await w.T.fetchTokenPrice({addresses:[e]}).catch((()=>(P.P.showError("Failed to fetch network token price"),{fungibles:[]}))),t=o.fungibles?.[0],n=t?.price.toString()||"0";I.tokensPriceMap[e]=parseFloat(n),I.networkTokenSymbol=t?.symbol||"",I.networkPrice=n},async getMyTokensWithBalance(e){const o=await c.Z.getMyTokensWithBalance(e),t=l.s.mapBalancesToSwapTokens(o);t&&(await N.getInitialGasPrice(),N.setBalances(t))},setBalances(e){const{networkAddress:o}=N.getParams(),t=h.W.state.activeCaipNetwork;if(!t)return;const n=e.find((e=>e.address===o));e.forEach((e=>{I.tokensPriceMap[e.address]=e.price||0})),I.myTokensWithBalance=e.filter((e=>e.address.startsWith(t.caipNetworkId))),I.networkBalanceInUSD=n?a.S.multiply(n.quantity.numeric,n.price).toString():"0"},async getInitialGasPrice(){const e=await l.s.fetchGasPrice();if(!e)return{gasPrice:null,gasPriceInUSD:null};if("solana"===h.W.state?.activeCaipNetwork?.chainNamespace)return I.gasFee=e.standard??"0",I.gasPriceInUSD=a.S.multiply(e.standard,I.networkPrice).div(1e9).toNumber(),{gasPrice:BigInt(I.gasFee),gasPriceInUSD:Number(I.gasPriceInUSD)};{const o=e.standard??"0",t=BigInt(o),n=BigInt(f),r=k.getGasPriceInUSD(I.networkPrice,n,t);return I.gasFee=o,I.gasPriceInUSD=r,{gasPrice:t,gasPriceInUSD:r}}},async swapTokens(){const e=m.U.state.address,o=I.sourceToken,t=I.toToken,n=a.S.bigNumber(I.sourceTokenAmount).gt(0);if(n||N.setToTokenAmount(""),!t||!o||I.loadingPrices||!n)return;I.loadingQuote=!0;const r=a.S.bigNumber(I.sourceTokenAmount).times(10**o.decimals).round(0);try{const n=await w.T.fetchSwapQuote({userAddress:e,from:o.address,to:t.address,gasPrice:I.gasFee,amount:r.toString()});I.loadingQuote=!1;const s=n?.quotes?.[0]?.toAmount;if(!s)return void p.h.open({shortMessage:"Incorrect amount",longMessage:"Please enter a valid amount"},"error");const i=a.S.bigNumber(s).div(10**t.decimals).toString();N.setToTokenAmount(i),N.hasInsufficientToken(I.sourceTokenAmount,o.address)?I.inputError="Insufficient balance":(I.inputError=void 0,N.setTransactionDetails())}catch(e){I.loadingQuote=!1,I.inputError="Insufficient balance"}},async getTransaction(){const{fromCaipAddress:e,availableToSwap:o}=N.getParams(),t=I.sourceToken,n=I.toToken;if(e&&o&&t&&n&&!I.loadingQuote)try{let o;return I.loadingBuildTransaction=!0,o=await l.s.fetchSwapAllowance({userAddress:e,tokenAddress:t.address,sourceTokenAmount:I.sourceTokenAmount,sourceTokenDecimals:t.decimals})?await N.createSwapTransaction():await N.createAllowanceTransaction(),I.loadingBuildTransaction=!1,I.fetchError=!1,o}catch(e){return b.I.goBack(),P.P.showError("Failed to check allowance"),I.loadingBuildTransaction=!1,I.approvalTransaction=void 0,I.swapTransaction=void 0,void(I.fetchError=!0)}},async createAllowanceTransaction(){const{fromCaipAddress:e,sourceTokenAddress:o,toTokenAddress:t}=N.getParams();if(e&&t){if(!o)throw new Error("createAllowanceTransaction - No source token address found.");try{const n=await w.T.generateApproveCalldata({from:o,to:t,userAddress:e}),r={data:n.tx.data,to:T.w.getPlainAddress(n.tx.from),gasPrice:BigInt(n.tx.eip155.gasPrice),value:BigInt(n.tx.value),toAmount:I.toTokenAmount};return I.swapTransaction=void 0,I.approvalTransaction={data:r.data,to:r.to,gasPrice:r.gasPrice,value:r.value,toAmount:r.toAmount},{data:r.data,to:r.to,gasPrice:r.gasPrice,value:r.value,toAmount:r.toAmount}}catch(e){return b.I.goBack(),P.P.showError("Failed to create approval transaction"),I.approvalTransaction=void 0,I.swapTransaction=void 0,void(I.fetchError=!0)}}},async createSwapTransaction(){const{networkAddress:e,fromCaipAddress:o,sourceTokenAmount:t}=N.getParams(),n=I.sourceToken,r=I.toToken;if(!(o&&t&&n&&r))return;const a=A.x.parseUnits(t,n.decimals)?.toString();try{const t=await w.T.generateSwapCalldata({userAddress:o,from:n.address,to:r.address,amount:a,disableEstimate:!0}),s=n.address===e,i=BigInt(t.tx.eip155.gas),c=BigInt(t.tx.eip155.gasPrice),u={data:t.tx.data,to:T.w.getPlainAddress(t.tx.to),gas:i,gasPrice:c,value:s?BigInt(a??"0"):BigInt("0"),toAmount:I.toTokenAmount};return I.gasPriceInUSD=k.getGasPriceInUSD(I.networkPrice,i,c),I.approvalTransaction=void 0,I.swapTransaction=u,u}catch(e){return b.I.goBack(),P.P.showError("Failed to create transaction"),I.approvalTransaction=void 0,I.swapTransaction=void 0,void(I.fetchError=!0)}},async sendTransactionForApproval(e){const{fromAddress:o,isAuthConnector:t}=N.getParams();I.loadingApprovalTransaction=!0;const n="Approve limit increase in your wallet";t?b.I.pushTransactionStack({onSuccess(){P.P.showLoading(n)}}):P.P.showLoading(n);try{await A.x.sendTransaction({address:o,to:e.to,data:e.data,value:e.value,chainNamespace:"eip155"}),await N.swapTokens(),await N.getTransaction(),I.approvalTransaction=void 0,I.loadingApprovalTransaction=!1}catch(e){const o=e;I.transactionError=o?.shortMessage,I.loadingApprovalTransaction=!1,P.P.showError(o?.shortMessage||"Transaction error"),v.E.sendEvent({type:"track",event:"SWAP_APPROVAL_ERROR",properties:{message:o?.shortMessage||o?.message||"Unknown",network:h.W.state.activeCaipNetwork?.caipNetworkId||"",swapFromToken:N.state.sourceToken?.symbol||"",swapToToken:N.state.toToken?.symbol||"",swapFromAmount:N.state.sourceTokenAmount||"",swapToAmount:N.state.toTokenAmount||"",isSmartAccount:m.U.state.preferredAccountTypes?.eip155===i.Vl.ACCOUNT_TYPES.SMART_ACCOUNT}})}},async sendTransactionForSwap(e){if(!e)return;const{fromAddress:o,toTokenAmount:t,isAuthConnector:n}=N.getParams();I.loadingTransaction=!0;const r=`Swapping ${I.sourceToken?.symbol} to ${a.S.formatNumberToLocalString(t,3)} ${I.toToken?.symbol}`,s=`Swapped ${I.sourceToken?.symbol} to ${a.S.formatNumberToLocalString(t,3)} ${I.toToken?.symbol}`;n?b.I.pushTransactionStack({onSuccess(){b.I.replace("Account"),P.P.showLoading(r),E.resetState()}}):P.P.showLoading("Confirm transaction in your wallet");try{const t=[I.sourceToken?.address,I.toToken?.address].join(","),r=await A.x.sendTransaction({address:o,to:e.to,data:e.data,value:e.value,chainNamespace:"eip155"});return I.loadingTransaction=!1,P.P.showSuccess(s),v.E.sendEvent({type:"track",event:"SWAP_SUCCESS",properties:{network:h.W.state.activeCaipNetwork?.caipNetworkId||"",swapFromToken:N.state.sourceToken?.symbol||"",swapToToken:N.state.toToken?.symbol||"",swapFromAmount:N.state.sourceTokenAmount||"",swapToAmount:N.state.toTokenAmount||"",isSmartAccount:m.U.state.preferredAccountTypes?.eip155===i.Vl.ACCOUNT_TYPES.SMART_ACCOUNT}}),E.resetState(),n||b.I.replace("Account"),E.getMyTokensWithBalance(t),r}catch(e){const o=e;return I.transactionError=o?.shortMessage,I.loadingTransaction=!1,P.P.showError(o?.shortMessage||"Transaction error"),void v.E.sendEvent({type:"track",event:"SWAP_ERROR",properties:{message:o?.shortMessage||o?.message||"Unknown",network:h.W.state.activeCaipNetwork?.caipNetworkId||"",swapFromToken:N.state.sourceToken?.symbol||"",swapToToken:N.state.toToken?.symbol||"",swapFromAmount:N.state.sourceTokenAmount||"",swapToAmount:N.state.toTokenAmount||"",isSmartAccount:m.U.state.preferredAccountTypes?.eip155===i.Vl.ACCOUNT_TYPES.SMART_ACCOUNT}})}},hasInsufficientToken:(e,o)=>k.isInsufficientSourceTokenForSwap(e,o,I.myTokensWithBalance),setTransactionDetails(){const{toTokenAddress:e,toTokenDecimals:o}=N.getParams();e&&o&&(I.gasPriceInUSD=k.getGasPriceInUSD(I.networkPrice,BigInt(I.gasFee),BigInt(f)),I.priceImpact=k.getPriceImpact({sourceTokenAmount:I.sourceTokenAmount,sourceTokenPriceInUSD:I.sourceTokenPriceInUSD,toTokenPriceInUSD:I.toTokenPriceInUSD,toTokenAmount:I.toTokenAmount}),I.maxSlippage=k.getMaxSlippage(I.slippage,I.toTokenAmount),I.providerFee=k.getProviderFee(I.sourceTokenAmount))}},N=(0,g.X)(E)}}]);